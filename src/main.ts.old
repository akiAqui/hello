import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { Csound } from '@csound/browser';
import csd from '/csound/synth.csd?raw';

class App {
  private scene: THREE.Scene;
  private camera: THREE.PerspectiveCamera;
  private renderer: THREE.WebGLRenderer;
  private controls: OrbitControls;
  private cube: THREE.Mesh;
  private model: THREE.Object3D | null = null;
  private csound: any = null;
  private instructionsDiv: HTMLDivElement;
  private animationState = {
    cubeRotating: false,
    modelScaling: false
  };
  
  constructor() {
    this.initScene();
    this.initCsound();
    this.createInstructions();
  }
  
  private createInstructions() {
    this.instructionsDiv = document.createElement('div');
    this.instructionsDiv.style.position = 'fixed';
    this.instructionsDiv.style.top = '10px';
    this.instructionsDiv.style.left = '10px';
    this.instructionsDiv.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
    this.instructionsDiv.style.color = 'white';
    this.instructionsDiv.style.padding = '10px';
    this.instructionsDiv.style.borderRadius = '5px';
    this.instructionsDiv.style.fontFamily = 'Arial, sans-serif';
    this.instructionsDiv.innerHTML = `
      Camera Controls:<br>
      W - Move Forward<br>
      S - Move Backward<br>
      A - Move Left<br>
      D - Move Right<br>
      Q - Move Up<br>
      E - Move Down<br>
      Mouse - Orbit Camera
    `;
    document.body.appendChild(this.instructionsDiv);
  }
  
  private async initCsound() {
    if (this.csound) return;
    
    this.csound = await Csound();
    await this.csound.compileCsdText(csd);
    await this.csound.start();
  }
  
  private initScene() {
    // Scene setup
    this.scene = new THREE.Scene();
    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    this.renderer = new THREE.WebGLRenderer();
    this.renderer.setSize(window.innerWidth, window.innerHeight);
    document.getElementById('app')?.appendChild(this.renderer.domElement);
    
    // Camera position
    this.camera.position.set(5, 5, 5);
    this.camera.lookAt(0, 0, 0);
    
    // Lights
    const light1 = new THREE.DirectionalLight(0xffffff, 1);
    light1.position.set(1, 1, 1);
    this.scene.add(light1);
    
    const light2 = new THREE.PointLight(0xffffff, 1);
    light2.position.set(-2, 3, -2);
    this.scene.add(light2);
    
    // Floor
    const floorGeometry = new THREE.PlaneGeometry(20, 20);
    const floorMaterial = new THREE.MeshStandardMaterial({ color: 0x808080 });
    const floor = new THREE.Mesh(floorGeometry, floorMaterial);
    floor.rotation.x = -Math.PI / 2;
    this.scene.add(floor);
    
    // Add transparent red sphere at model position
    const sphereGeometry = new THREE.SphereGeometry(0.5, 32, 32);
    const sphereMaterial = new THREE.MeshBasicMaterial({
      color: 0xff0000,
      transparent: true,
      opacity: 0.5
    });
    const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial);
    sphere.position.set(-2, 1, 0);
    this.scene.add(sphere);
    
    // Cube with textures
    const cubeGeometry = new THREE.BoxGeometry(2,2,2);
    const textureLoader = new THREE.TextureLoader();
    const materials = [
      'autumn_ground.jpg',
      'lakeSide.jpg',
      'ruinOfFishermansFactory.jpg',
      'wave.jpg',
      'kareha.jpg',
      'pebble.jpg'
    ].map(filename => new THREE.MeshStandardMaterial({
      map: textureLoader.load(`/textures/${filename}`)
    }));
    
    this.cube = new THREE.Mesh(cubeGeometry, materials);
    this.cube.position.set(2, 4, 2);
    this.scene.add(this.cube);
    
    // Load GLTF model
    const loader = new GLTFLoader();
    loader.load('/models/complex.glb', (gltf) => {
      this.model = gltf.scene;
      
      this.model.traverse((child) => {  // traverseを追加
        // モデルの全メッシュにマテリアルを適用
        if (child instanceof THREE.Mesh) {
          console.log('Mesh found:', child);
          console.log('Geometry:', child.geometry);
          console.log('Material before:', child.material);
          
          // マテリアルを明るい色で設定して確認
          child.material = new THREE.MeshStandardMaterial({
            color: 0xff0000,  // 赤色
            metalness: 0.1,
            roughness: 0.5,
            side: THREE.DoubleSide  // 両面を表示
          });
          
          
          // マテリアルを明るい色で設定して確認
          child.material = new THREE.MeshStandardMaterial({
            color: 0xff0000,  // 赤色
            metalness: 0.1,
            roughness: 0.5,
            side: THREE.DoubleSide  // 両面を表示
          });
          
          // ワイヤーフレームで表示してみる
          child.material = new THREE.MeshStandardMaterial({
            color: 0xff0000,
            metalness: 0.1,
            roughness: 0.5,
            side: THREE.DoubleSide,
            wireframe: true  // ワイヤーフレーム表示を追加
          });

          //
          console.log('Mesh found:', child);
          console.log('Geometry:', child.geometry);
          console.log('Material before:', child.material);


          // ジオメトリの詳細を確認
          console.log('Geometry bounds:', child.geometry.boundingBox);
          console.log('Vertex count:', child.geometry.attributes.position.count);
          console.log('Index count:', child.geometry.index.count);
          
          // マテリアルを確認
          console.log('Material after:', child.material);
        }
      });

      // モデルの位置とスケールを設定する前に、原点に対する位置を確認
      const centerHelper = new THREE.AxesHelper(5);
      this.scene.add


      this.model.position.set(-2, 1, 0);
      this.model.scale.set(3,3,3);
      this.scene.add(this.model);

      // モデルのローカル座標系を表示
      const modelAxesHelper = new THREE.AxesHelper(2);
      this.model.add(modelAxesHelper);

      
      // モデルの境界ボックスを表示
      const box = new THREE.Box3().setFromObject(this.model);
      const boxHelper = new THREE.Box3Helper(box, 0xffff00);
      this.scene.add(boxHelper);
        
      console.log('Model bounds:', box.min, box.max);
      console.log('Model loaded:', gltf.scene);
      console.log('Scene children:', this.scene.children);
    },
                // エラーハンドリングを追加
                (xhr) => {
                  console.log((xhr.loaded / xhr.total * 100) + '% loaded');
                },
                (error) => {
                  console.error('An error happened:', error);
                });
  
    // Controls
    this.controls = new OrbitControls(this.camera, this.renderer.domElement);
    this.setupKeyboardControls();
    this.setupEventListeners();
    this.animate();
    // デバッグ用にシーンをグローバル変数として公開
    (window as any).scene = this.scene;
  }
  
  private setupEventListeners() {
    const raycaster = new THREE.Raycaster();
    const mouse = new THREE.Vector2();
    
    window.addEventListener('click', (event) => {
      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
      
      raycaster.setFromCamera(mouse, this.camera);
      const intersects = raycaster.intersectObjects([this.cube, this.model!]);
      
      if (intersects.length > 0) {
        if (intersects[0].object === this.cube) {
          this.startCubeRotation();
          if (this.csound) {
            this.csound.inputMessage('i 1 0 5 0.3 220');
          }
        } else if (intersects[0].object === this.model) {
          this.startModelScale();
        }
      }
    });
  }
  
  private setupKeyboardControls() {
    window.addEventListener('keydown', (event) => {
      const moveSpeed = 0.1;
      switch(event.key) {
        case 'w': this.camera.position.z -= moveSpeed; break;
        case 's': this.camera.position.z += moveSpeed; break;
        case 'a': this.camera.position.x -= moveSpeed; break;
        case 'd': this.camera.position.x += moveSpeed; break;
        case 'q': this.camera.position.y += moveSpeed; break;
        case 'e': this.camera.position.y -= moveSpeed; break;
      }
    });
  }
  
  private startCubeRotation() {
    this.animationState.cubeRotating = true;
    setTimeout(() => {
      this.animationState.cubeRotating = false;
    }, 5000);
  }
  
  private startModelScale() {
    this.animationState.modelScaling = true;
    setTimeout(() => {
      this.animationState.modelScaling = false;
    }, 5000);
  }
  
  private animate() {
    requestAnimationFrame(() => this.animate());
    
    if (this.animationState.cubeRotating) {
      this.cube.rotation.y += 0.01;
      this.cube.rotation.z += 0.01;
    }
    
    if (this.animationState.modelScaling && this.model) {
      const scale = 1 + Math.sin(Date.now() * 0.002) * 0.2;
      this.model.scale.set(scale, scale, scale);
    }
    
    this.renderer.render(this.scene, this.camera);
  }
}

new App();
